#!/bin/bash
#
# Until we get snapfirewall to dynamically setup all the rules, here we
# have a simple script that pushes the ip?tables.rules files to the kernel.
#
set -e

source /etc/network/firewall.conf

# Make sure the user entered all the parameters as expected
# If installed from the bundle, this will be automatic
#
if test "${PUBLIC_IP#*BUNDLE_PUBLIC_IP}" != "${PUBLIC_IP}" \
     || test "${PUBLIC_INTERFACE#*BUNDLE_PUBLIC_INTERFACE}" != "${PUBLIC_INTERFACE}" \
     || test "${PRIVATE_IP#*BUNDLE_PRIVATE_IP}" != "${PRIVATE_IP}" \
     || test "${PRIVATE_INTERFACE#*BUNDLE_PRIVATE_INTERFACE}" != "${PRIVATE_INTERFACE}" \
     || test "${ADMIN_IPS#*BUNDLE_ADMIN_IPS}" != "${ADMIN_IPS}" \
     || test "${PRIVATE_NETWORK_IPS#*BUNDLE_PRIVATE_NETWORK_IPS}" != "${PRIVATE_NETWORK_IPS}" \
     || test "${SECURE_IP#*BUNDLE_SECURE_IP}" != "${SECURE_IP}"
then
	echo "One or more of the firewall variables was not properly updated yet. Firewall NOT set up!"
	exit 1;
fi


. /lib/lsb/init-functions

log_daemon_msg "Setting up the firewall" "$IP4TABLES_CONFIG"
grep -v '^[[:space:]]*\(\#.*\)\?$' $IP4TABLES_CONFIG \
	| grep -v '^[[:space:]]*$' \
	| sed -e "s/@PUBLIC_IP@/$PUBLIC_IP/" \
	      -e "s/@PRIVATE_IP@/$PRIVATE_IP/" \
	      -e "s/@PUBLIC_INTERFACE@/$PUBLIC_INTERFACE/" \
	      -e "s/@PRIVATE_INTERFACE@/$PRIVATE_INTERFACE/" \
	| awk -vSECURE_IP="${SECURE_IP}" \
		'{
			if(/@SECURE_IP@/) {
				if(length(SECURE_IP) > 0) {
					copy=$0
					gsub(/@SECURE_IP@/, SECURE_IP, copy)
					print copy
				}
			}
			else {
				print;
			}
		}' \
	| awk -vADMIN_IPS="${ADMIN_IPS}" \
		'BEGIN {
			split(ADMIN_IPS, array);
		}
		{
			if(/@ADMIN_IPS@/) {
				copy=$0
				if(length(ADMIN_IPS) > 0) {
					for(i in array) {
						gsub(/@ADMIN_IPS@/, array[i], copy)
						print copy
						copy=$0
					}
				}
			}
			else {
				print;
			}
		}' \
	| awk -vPRIVATE_NETWORK_IPS="${PRIVATE_NETWORK_IPS}" \
		'BEGIN {
			split(PRIVATE_NETWORK_IPS, array);
		}
		{
			if(/@PRIVATE_NETWORK_IPS@/) {
				copy=$0
				if(length(PRIVATE_NETWORK_IPS) > 0) {
					for(i in array) {
						gsub(/@PRIVATE_NETWORK_IPS@/, array[i], copy)
						print copy
						copy=$0
					}
				}
			}
			else {
				print;
			}
		}' \
	| iptables-restore
log_end_msg $?

# Note: we do not run sed of the various variables against the IPv6
#       rules because at this point this just blocks all IPv6 traffic.
#
log_daemon_msg "Setting up the firewall in ipv6" "$IP6TABLES_CONFIG"
grep -v '^[[:space:]]*\(\#.*\)\?$' $IP6TABLES_CONFIG \
	| grep -v '^[[:space:]]*$' | ip6tables-restore
log_end_msg $?

exit 0;
# vim: ts=8
